<?php

namespace App;

class StandardizedScore
{
    private $ist;

    protected $standardRef = [
        14 => [
            'se' => [71,75,79,83,86,90,94,97,101,105,109,112,116,120,123,127,131,134,134,134,134],
            'wa' => [71,74,78,81,85,89,92,96,99,103,106,110,114,117,121,124,127,131,131,131,131],
            'an' => [77,80,83,87,90,94,97,101,104,108,111,115,118,121,125,128,132,132,132,132,132],
            'ge' => [74,77,81,84,88,91,94,97,101,105,108,112,115,119,122,126,129,132,132,132,132],
            'me' => [76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,126,129,129,129],
            'ra' => [73,77,80,84,88,91,95,98,102,105,109,113,116,120,123,127,130,134,134,134,134],
            'zr' => [80,83,85,88,91,94,97,100,103,105,108,111,114,117,120,123,125,129,131,131,131],
            'fa' => [73,76,79,83,86,89,92,95,99,102,105,108,112,115,118,121,125,128,131,131,131],
            'wu' => [71,74,78,81,85,88,92,95,99,102,106,109,112,116,119,123,126,130,133,133,133],
            'total' => ['start' => 66, 'step' => 5, 'range' => 10]
        ],
        15 => [
            'se' => [70,74,77,81,84,88,91,94,98,101,105,108,112,115,119,123,126,129,132,132,132],
            'wa' => [69,72,76,79,83,86,90,93,97,100,103,107,110,114,117,121,124,128,131,131,131],
            'an' => [79,81,84,87,90,93,96,99,101,104,107,110,113,116,119,121,124,127,130,133,133],
            'ge' => [71,74,78,81,85,88,92,95,99,102,106,109,112,116,119,123,126,130,133,133,133],
            'me' => [76,79,82,84,87,89,92,85,97,100,103,105,108,111,113,116,118,121,124,126,129],
            'ra' => [74,77,80,83,86,89,93,96,99,102,105,108,111,114,118,121,124,127,130,133,133],
            'zr' => [78,81,83,86,89,91,94,97,99,102,105,108,110,113,116,118,121,124,126,129,132],
            'fa' => [75,78,81,83,86,89,92,95,98,101,103,106,109,112,115,118,121,123,126,129,132],
            'wu' => [70,73,77,80,84,87,91,94,98,101,104,108,111,115,118,122,125,129,132,132,132],
            'total' => ['start' => 64, 'step' => 5, 'range' => 10]
        ],
        16 => [
            'se' => [68,72,75,78,82,85,88,92,95,98,102,105,108,112,115,118,122,125,128,132,132],
            'wa' => [68,72,75,78,82,85,88,92,95,98,102,105,108,112,115,118,122,125,128,132,132],
            'an' => [75,78,81,84,87,89,92,95,98,101,104,107,109,112,115,118,121,124,127,129,132],
            'ge' => [72,75,78,81,84,88,91,94,97,100,103,106,109,113,116,119,122,125,128,131,131],
            'me' => [73,75,78,81,84,86,89,92,94,97,100,102,105,108,111,113,116,119,121,124,127],
            'ra' => [73,76,79,82,85,88,92,95,98,101,104,107,110,113,116,119,122,125,128,131,134],
            'zr' => [78,80,83,85,88,91,93,96,98,101,103,106,108,111,114,116,119,121,124,126,129],
            'fa' => [74,77,80,83,86,88,91,94,97,99,102,105,108,111,113,116,119,122,124,127,130],
            'wu' => [72,75,78,81,84,87,90,93,97,100,103,106,109,112,115,118,122,125,128,131,134],
            'total' => ['start' => 63, 'step' => 5, 'range' => 10]
        ],
    ];

    public function __construct(Ist $ist)
    {
        $this->ist = $ist;
    }

    public function total()
    {
        $path = "{$this->ist->test_taker_age}.total";
        $totalRef = array_get($this->standardRef, $path);

        // substract total raw score to make tens (10, 20, ..) not included
        $steps = floor(($this->ist->raw_score->total - .1) / $totalRef['range']);

        return $totalRef['start'] + ($totalRef['step'] * $steps);
    }

    public function scorePerType($questionType)
    {
        $rawScoreOnType = $this->ist->raw_score->$questionType;
        $path = "{$this->ist->test_taker_age}.{$questionType}.{$rawScoreOnType}";

        return array_get($this->standardRef, $path);
    }

    public function __get($name)
    {
        return call_user_func([$this, $name]);
    }

    public function __call($name, $arguments)
    {
        if (preg_match('/^(se|wa|an|ge|ra|zr|fa|wu|me)/', $name)) {
            return $this->scorePerType($name);
        }

        if (method_exists($this, $name)) {
            return call_user_func([$this, $name]);
        }

        throw new \Exception("Property {$name} does not exists.");
    }
}
